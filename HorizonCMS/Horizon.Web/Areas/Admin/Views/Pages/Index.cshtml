@model IEnumerable<Horizon.Web.Models.Page>

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
@Html.AntiForgeryToken()
<ol class="breadcrumb">
    <li><a href="#"><span class="glyphicon glyphicon-home"></span></a></li>
    <li><span class="glyphicon glyphicon-file"></span> Pages</li>
</ol>
@if (User.IsInRole("SuperAdmin"))
{
    Html.RenderPartial("../Shared/Partials/_Statistics");
}
<!-- NOTIFICATIONS -->
<div class="modal fade" id="removeModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Remove selected elements</h4>
            </div>
            <div class="modal-body"></div>
            <div class="modal-footer">
                <input type="hidden" id="parameters" value="" />
                <button id="cancelButton" type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button id="acceptButton" type="button" class="btn btn-success">Remove</button>
            </div>
        </div>

    </div>
</div>
<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
    <div class="horizon-panel horizon-panel-warning">
        <div class="horizon-panel-title">
            Pages <div id="notificationsLoader" class="panel-loader"></div>
        </div>
        <div class="horizon-panel-body">
            <table id="notificationsTable" class="table table-striped intellitable">
                <thead></thead>
                <tbody></tbody>
                <tfoot></tfoot>
            </table>
        </div>
    </div>
</div>
@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            var options = {
                loaderSelector: "#notificationsLoader",
                services: {
                    create: 'pages/createPages',
                    retrieve: 'pages/getPages',
                    update: 'pages/updatePages',
                    remove: 'pages/removePages'
                },
                token: $('input[name="__RequestVerificationToken"]').val(),
                cols: [{ name: "Id", sortable: false, principal: true, type: "string", searchable: false },
                    { name: "Language", sortable: true, principal: false, type: "string", searchable: true },
                    { name: "Title", sortable: true, principal: false, type: "string", searchable: true },
                    { name: "Description", sortable: false, principal: false, type: "string", searchable: true },
                    { name: "IsDefault", sortable: true, principal: false, type: "bool", searchable: false },
                    { name: "CreateDate", sortable: true, principal: false, type: "date", searchable: true }],
                page: 1,
                records: 10,
                entity: 'Notifications',
                orderBy: 'CreateDate',
                orderDirection: 'Asc'
            };
            $('#notificationsTable').intelliTable(options);

            var ctx = new Array();
            ctx.push(document.getElementById("myChart").getContext("2d"));

            var options = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,

                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",

                //Number - The width of each segment stroke
                segmentStrokeWidth: 1,

                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 90, // This is 0 for Pie charts

                //Number - Amount of animation steps
                animationSteps: 100,

                //String - Animation easing effect
                animationEasing: "easeOutBounce",

                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: false,

                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,

                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"

            };
            var myDoughnutChart = new Chart(ctx[0]).Doughnut([
            {
                value: 75,
                color: "#F7464A",
                highlight: "#FF5A5E",
                label: "Red"
            },
            {
                value: 25,
                color: "#ccc",
                highlight: "#FFC870",
                label: "Yellow"
            }
            ], options);

        });
    </script>
}
@*<div class="panel panel-primary">
        <div class="panel-heading">Páginas</div>
        <div class="panel-body">
            <table class="table table-striped">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Language.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Template.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>

                    <th>
                        @Html.DisplayNameFor(model => model.CreateDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UpdateDate)
                    </th>
                    <th></th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Language.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Template.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.CreateDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UpdateDate)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                            @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                        </td>
                    </tr>
                }

            </table>
        </div>
    </div>
    <div class="panel panel-primary">
        <div class="panel-heading">Páginas</div>
        <div class="panel-body">
           @Html.Partial("Create", new Horizon.Web.Models.Page())
        </div>
    </div>*@
@*@section scripts
    {
        @Scripts.Render("~/bundles/TinyMCE")
        <script type="text/javascript">
            $(document).ready(function () {
                $.each($('.hz-dropdown'), function (index, element) {
                    var parent = $(this);
                    var target = $(this).data('target');

                    $(target).on('statusChange', function (element, text) {

                        $(parent).find('.inner-text').text(text);
                        $(parent).find('button').removeClass('btn-default').addClass('btn-success');
                    });

                    $(element).find('.dropdown-menu > li').on('click', function () {

                        $(target).val($(this).data('val')).trigger('statusChange', $(this).data('text'));

                    });
                });





                tinymce.init({
                    selector: "textarea",
                    theme: "modern",
                    plugins: [
                        "advlist autolink lists link image charmap preview hr anchor pagebreak",
                        "searchreplace wordcount visualblocks visualchars code fullscreen",
                        "insertdatetime media nonbreaking save table contextmenu directionality",
                        "emoticons template paste textcolor colorpicker textpattern imagetools"
                    ],
                    toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
                    //toolbar2: "print preview media | forecolor backcolor emoticons",
                    image_advtab: true,
                    //templates: [
                    //    { title: 'Test template 1', content: 'Test 1' },
                    //    { title: 'Test template 2', content: 'Test 2' }
                    //],
                    valid_element: "+span[id|name|class|style],+span[*],+div[*],+section[class],+h1,+h2,+h3,+h4,+h5,+div[class]",
                    valid_children: "+span[id|name|class|style],+span[*],+div[*],+h1[*],+h2[*]"
                });
            });
        </script>
    }*@


